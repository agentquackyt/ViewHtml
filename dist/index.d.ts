// Generated by dts-bundle-generator v9.5.1

/**
 * A class for processing HTML strings with keywords and translations.
 * Keywords are prefixed with a specified character (e.g., '$') and can be replaced with values.
 * Translations are loaded from a JSON dictionary and applied based on a specified language.
 * @example
 * const html = new ViewHtml("<h1>$title</h1>", "$");
 * html.interpret({ title: "Hello, World!" }).toHTML(); // "<h1>Hello, World!</h1>"
 * html.translate("dictionary.json", "EN").toHTML(); // "<h1>Hello, World!</h1>"
 * @version 1.0.0
 * @since 1.0.0
 */
export declare class ViewHtml {
	private html;
	private prefix;
	/**
	 * Constructs a ViewHtml instance with the raw HTML string and a prefix character.
	 * @param html The raw HTML string containing keywords prefixed with the specified character.
	 * @param prefix The character used to identify keywords (e.g., '$').
	 */
	constructor(html: string, prefix: string);
	/**
	 * Sets a new prefix character for identifying keywords in the HTML.
	 * @param prefix The new prefix character to use for identifying keywords.
	 * @returns The instance itself for command chaining.
	 */
	selector(prefix: string): this;
	/**
	 * Sets a new prefix character for identifying keywords in the HTML.
	 * @param prefix The new prefix character to use for identifying keywords.
	 * @returns The instance itself for command chaining.
	 * @alias selector
	 */
	s(prefix: string): this;
	/**
	 * Interprets keywords in the HTML and replaces them with values from a provided object.
	 * Now supports advanced data arrays with syntax:
	 *   @for:<arrayKey>{...template...}
	 * Each occurrence will be repeated for every element in the array, replacing inner keywords.
	 * @param data An object with keywords as keys and their replacement values. Array values trigger for-loop processing.
	 * @returns The instance itself for command chaining.
	 */
	interpret(data: Record<string, any>): ViewHtml;
	/**
	 * Translates keywords in the HTML using a dictionary and a specified language.
	 * @param dictionary Either a path to a JSON file or an object containing translations.
	 * @param language The language key (e.g., 'EN', 'DE') to select translations from the dictionary.
	 * @returns A promise that resolves to the instance itself for chaining.
	 */
	translate(dictionary: string | Record<string, Record<string, string>>, language: string): Promise<ViewHtml>;
	/**
	 * Returns the processed HTML string.
	 * @returns The final HTML string after all interpretations and translations.
	 */
	toHTML(): string;
}

export {};
